{"head":{"title":"Automatic deployment on GitHub Pages","description":"Be sure that you use the statinamic.CNAME option in your\npackage.json\\`. See Configuration\n\nYou will have multiple possibilities to deploy…"},"body":"<p><strong>Be sure that you use the <code>statinamic.CNAME</code> option in your\n``package.json`. See <a href=\"./configuration/\">Configuration</a></strong></p>\n<p>You will have multiple possibilities to deploy your <code>dist</code> folder on the\n<code>gh-pages</code> branch.\nYou can use your own method, using something like</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/gh-pages\">gh-pages</a></li>\n<li><a href=\"https://www.npmjs.com/package/buildbranch\">buildbranch</a></li>\n<li><a href=\"https://github.com/X1011/git-directory-deploy\">git-directory-deploy</a></li>\n</ul>\n<hr>\n<p>The following instructions show you how to do it with <code>gh-pages</code>,\nbut it should not be very different from other solutions.</p>\n<p>This package works on Travis-CI.</p>\n<h3 id=\"get-the-dependency\"><a class=\"markdownIt-Anchor\" href=\"#get-the-dependency\">#</a> Get the dependency</h3>\n<pre><code class=\"language-console\">$ npm <span class=\"hljs-tag\">i</span> -D gh-pages</code></pre>\n<p>To learn a thing or two, try</p>\n<pre><code class=\"language-console\">$ ./node_modules/.bin/gh-pages <span class=\"hljs-comment\">--help</span></code></pre>\n<h3 id=\"add-a-command-to-deploy\"><a class=\"markdownIt-Anchor\" href=\"#add-a-command-to-deploy\">#</a> Add a command to deploy</h3>\n<p>In your <code>package.json</code>, add the following items under the <code>scripts</code> section:</p>\n<pre><code class=\"language-json\">{\n  \"<span class=\"hljs-attribute\">scripts</span>\": <span class=\"hljs-value\">{\n    \"<span class=\"hljs-attribute\">predeploy</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"npm run build\"</span></span>,\n    \"<span class=\"hljs-attribute\">deploy</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"gh-pages\"</span>\n  </span>}\n</span>}</code></pre>\n<p>Now run:</p>\n<pre><code class=\"language-console\">$ npm <span class=\"hljs-command\">run</span> deploy</code></pre>\n<p>It should be good!</p>\n<h4 id=\"automatically-with-travis-ci\"><a class=\"markdownIt-Anchor\" href=\"#automatically-with-travis-ci\">#</a> Automatically with Travis-CI</h4>\n<p>Here is one quick and easy way to setup automatic deployment on each commit\npushed to master that should take a couple of minutes to setup:</p>\n<h5 id=\"enable-travis-ci-for-your-repository\"><a class=\"markdownIt-Anchor\" href=\"#enable-travis-ci-for-your-repository\">#</a> Enable Travis-CI for your repository</h5>\n<ul>\n<li><a href=\"https://travis-ci.org/profile\">https://travis-ci.org/profile</a></li>\n</ul>\n<p>You may need to hit the <code>Sync</code> button to see your repository if it’s not there.</p>\n<h5 id=\"create-a-travis-yml\"><a class=\"markdownIt-Anchor\" href=\"#create-a-travis-yml\">#</a> Create a <code>.travis.yml</code></h5>\n<pre><code class=\"language-yml\">language: node_js\nnode_js:\n  - <span class=\"hljs-string\">'5'</span>\n  - <span class=\"hljs-string\">'4'</span>\n\n<span class=\"hljs-comment\"># (by default, Travis will run \"npm test\" script when the language is node_js)</span>\n\n<span class=\"hljs-comment\"># deploy is run after \"npm test\"</span>\ndeploy:\n  <span class=\"hljs-comment\"># keep the build we just made with \"npm test\" (dist/)</span>\n  skip_cleanup: <span class=\"hljs-constant\">true</span>\n\n  <span class=\"hljs-comment\"># define the script to use for deployment</span>\n  provider: script\n  script: ./scripts/deploy.sh\n\n  <span class=\"hljs-comment\"># only run on one version of node (v5 here)</span>\n  <span class=\"hljs-command\"><span class=\"hljs-keyword\">on</span>:</span>\n    branch: master\n    node: <span class=\"hljs-string\">'5'</span></code></pre>\n<h5 id=\"generate-a-new-token\"><a class=\"markdownIt-Anchor\" href=\"#generate-a-new-token\">#</a> Generate a new token</h5>\n<ul>\n<li><a href=\"https://github.com/settings/tokens/new\">https://github.com/settings/tokens/new</a></li>\n</ul>\n<p>With only <code>repo</code> or <code>public_repo</code> scopes.</p>\n<h5 id=\"copy-and-encrypt-this-new-token\"><a class=\"markdownIt-Anchor\" href=\"#copy-and-encrypt-this-new-token\">#</a> Copy and encrypt this new token</h5>\n<p><em>Note: replace <code>{YOU/YOUR_REPO}</code> and <code>{YOUR_TOKEN}</code>.</em></p>\n<pre><code class=\"language-console\">$ npm i -g travis-<span class=\"hljs-built_in\">encrypt</span>\n$ travis-<span class=\"hljs-built_in\">encrypt</span> <span class=\"hljs-comment\">--add --repo {YOU/YOUR_REPO} GITHUB_TOKEN={YOUR_TOKEN}</span></code></pre>\n<h2 id=\"create-a-script\"><a class=\"markdownIt-Anchor\" href=\"#create-a-script\">#</a> Create a script</h2>\n<p>Here is an example of a small script that will use gh-pages.\nYou can place it in <code>./scripts/deploy.sh</code>.\nPlease read and adjust it carefully.</p>\n<pre><code class=\"language-sh\"><span class=\"hljs-shebang\">#!/usr/bin/env bash\n</span>\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$TRAVIS</span>\"</span> = <span class=\"hljs-string\">\"true\"</span> ]\n<span class=\"hljs-keyword\">then</span>\n  <span class=\"hljs-comment\"># git need this, on Travis-CI nobody is defined</span>\n  git config --global user.email <span class=\"hljs-string\">\"gh-pages@localhost\"</span>\n  git config --global user.name <span class=\"hljs-string\">\"npm gh-pages\"</span>\n<span class=\"hljs-keyword\">fi</span>\n\n./node_modules/.bin/gh-pages \\\n  <span class=\"hljs-comment\"># ADJUST YOUR REMOTE HERE</span>\n  --repo https://<span class=\"hljs-variable\">$GITHUB_TOKEN</span>@github.com/{YOU/YOUR_REPO}.git \\\n  <span class=\"hljs-comment\"># TO HIDE YOUR $GITHUB_TOKEN!</span>\n  <span class=\"hljs-comment\"># this is really important</span>\n  --silent</code></pre>\n<h5 id=\"add-a-test-script-in-your-package-json-scripts-section\"><a class=\"markdownIt-Anchor\" href=\"#add-a-test-script-in-your-package-json-scripts-section\">#</a> Add a <code>test</code> script in your <code>package.json</code> <code>scripts</code> section</h5>\n<pre><code class=\"language-json\">{\n  \"<span class=\"hljs-attribute\">scripts</span>\": <span class=\"hljs-value\">{\n    \"<span class=\"hljs-attribute\">test</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"npm run build\"</span></span>,\n  }\n</span>}</code></pre>\n<p>Now, commit and push to master, wait a couple of minutes and it should be good.</p>\n<p><strong>If you plan to rely on Travis only, you can probably remove the <code>predeploy</code> and\n<code>deploy</code> scripts that we defined earlier.</strong></p>\n","rawBody":"\n**Be sure that you use the ``statinamic.CNAME`` option in your\n``package.json`. See [Configuration](./configuration/)**\n\nYou will have multiple possibilities to deploy your `dist` folder on the\n`gh-pages` branch.\nYou can use your own method, using something like\n- [gh-pages](https://www.npmjs.com/package/gh-pages)\n- [buildbranch](https://www.npmjs.com/package/buildbranch)\n- [git-directory-deploy](https://github.com/X1011/git-directory-deploy)\n\n---\n\nThe following instructions show you how to do it with `gh-pages`,\nbut it should not be very different from other solutions.\n\nThis package works on Travis-CI.\n\n### Get the dependency\n\n```console\n$ npm i -D gh-pages\n```\n\nTo learn a thing or two, try\n\n```console\n$ ./node_modules/.bin/gh-pages --help\n```\n\n### Add a command to deploy\n\nIn your `package.json`, add the following items under the `scripts` section:\n\n```json\n{\n  \"scripts\": {\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages\"\n  }\n}\n```\n\nNow run:\n\n```console\n$ npm run deploy\n```\n\nIt should be good!\n\n#### Automatically with Travis-CI\n\nHere is one quick and easy way to setup automatic deployment on each commit\npushed to master that should take a couple of minutes to setup:\n\n##### Enable Travis-CI for your repository\n\n- https://travis-ci.org/profile\n\nYou may need to hit the `Sync` button to see your repository if it's not there.\n\n##### Create a `.travis.yml`\n\n```yml\nlanguage: node_js\nnode_js:\n  - '5'\n  - '4'\n\n# (by default, Travis will run \"npm test\" script when the language is node_js)\n\n# deploy is run after \"npm test\"\ndeploy:\n  # keep the build we just made with \"npm test\" (dist/)\n  skip_cleanup: true\n\n  # define the script to use for deployment\n  provider: script\n  script: ./scripts/deploy.sh\n\n  # only run on one version of node (v5 here)\n  on:\n    branch: master\n    node: '5'\n```\n\n##### Generate a new token\n\n- https://github.com/settings/tokens/new\n\nWith only `repo` or `public_repo` scopes.\n\n##### Copy and encrypt this new token\n\n*Note: replace `{YOU/YOUR_REPO}` and `{YOUR_TOKEN}`.*\n\n```console\n$ npm i -g travis-encrypt\n$ travis-encrypt --add --repo {YOU/YOUR_REPO} GITHUB_TOKEN={YOUR_TOKEN}\n```\n\n## Create a script\n\nHere is an example of a small script that will use gh-pages.\nYou can place it in ``./scripts/deploy.sh``.\nPlease read and adjust it carefully.\n\n```sh\n#!/usr/bin/env bash\n\nif [ \"$TRAVIS\" = \"true\" ]\nthen\n  # git need this, on Travis-CI nobody is defined\n  git config --global user.email \"gh-pages@localhost\"\n  git config --global user.name \"npm gh-pages\"\nfi\n\n./node_modules/.bin/gh-pages \\\n  # ADJUST YOUR REMOTE HERE\n  --repo https://$GITHUB_TOKEN@github.com/{YOU/YOUR_REPO}.git \\\n  # TO HIDE YOUR $GITHUB_TOKEN!\n  # this is really important\n  --silent\n```\n\n##### Add a `test` script in your `package.json` `scripts` section\n\n```json\n{\n  \"scripts\": {\n    \"test\": \"npm run build\",\n  }\n}\n```\n\nNow, commit and push to master, wait a couple of minutes and it should be good.\n\n**If you plan to rely on Travis only, you can probably remove the `predeploy` and\n`deploy` scripts that we defined earlier.**\n","raw":"---\ntitle: Automatic deployment on GitHub Pages\n---\n\n**Be sure that you use the ``statinamic.CNAME`` option in your\n``package.json`. See [Configuration](./configuration/)**\n\nYou will have multiple possibilities to deploy your `dist` folder on the\n`gh-pages` branch.\nYou can use your own method, using something like\n- [gh-pages](https://www.npmjs.com/package/gh-pages)\n- [buildbranch](https://www.npmjs.com/package/buildbranch)\n- [git-directory-deploy](https://github.com/X1011/git-directory-deploy)\n\n---\n\nThe following instructions show you how to do it with `gh-pages`,\nbut it should not be very different from other solutions.\n\nThis package works on Travis-CI.\n\n### Get the dependency\n\n```console\n$ npm i -D gh-pages\n```\n\nTo learn a thing or two, try\n\n```console\n$ ./node_modules/.bin/gh-pages --help\n```\n\n### Add a command to deploy\n\nIn your `package.json`, add the following items under the `scripts` section:\n\n```json\n{\n  \"scripts\": {\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages\"\n  }\n}\n```\n\nNow run:\n\n```console\n$ npm run deploy\n```\n\nIt should be good!\n\n#### Automatically with Travis-CI\n\nHere is one quick and easy way to setup automatic deployment on each commit\npushed to master that should take a couple of minutes to setup:\n\n##### Enable Travis-CI for your repository\n\n- https://travis-ci.org/profile\n\nYou may need to hit the `Sync` button to see your repository if it's not there.\n\n##### Create a `.travis.yml`\n\n```yml\nlanguage: node_js\nnode_js:\n  - '5'\n  - '4'\n\n# (by default, Travis will run \"npm test\" script when the language is node_js)\n\n# deploy is run after \"npm test\"\ndeploy:\n  # keep the build we just made with \"npm test\" (dist/)\n  skip_cleanup: true\n\n  # define the script to use for deployment\n  provider: script\n  script: ./scripts/deploy.sh\n\n  # only run on one version of node (v5 here)\n  on:\n    branch: master\n    node: '5'\n```\n\n##### Generate a new token\n\n- https://github.com/settings/tokens/new\n\nWith only `repo` or `public_repo` scopes.\n\n##### Copy and encrypt this new token\n\n*Note: replace `{YOU/YOUR_REPO}` and `{YOUR_TOKEN}`.*\n\n```console\n$ npm i -g travis-encrypt\n$ travis-encrypt --add --repo {YOU/YOUR_REPO} GITHUB_TOKEN={YOUR_TOKEN}\n```\n\n## Create a script\n\nHere is an example of a small script that will use gh-pages.\nYou can place it in ``./scripts/deploy.sh``.\nPlease read and adjust it carefully.\n\n```sh\n#!/usr/bin/env bash\n\nif [ \"$TRAVIS\" = \"true\" ]\nthen\n  # git need this, on Travis-CI nobody is defined\n  git config --global user.email \"gh-pages@localhost\"\n  git config --global user.name \"npm gh-pages\"\nfi\n\n./node_modules/.bin/gh-pages \\\n  # ADJUST YOUR REMOTE HERE\n  --repo https://$GITHUB_TOKEN@github.com/{YOU/YOUR_REPO}.git \\\n  # TO HIDE YOUR $GITHUB_TOKEN!\n  # this is really important\n  --silent\n```\n\n##### Add a `test` script in your `package.json` `scripts` section\n\n```json\n{\n  \"scripts\": {\n    \"test\": \"npm run build\",\n  }\n}\n```\n\nNow, commit and push to master, wait a couple of minutes and it should be good.\n\n**If you plan to rely on Travis only, you can probably remove the `predeploy` and\n`deploy` scripts that we defined earlier.**\n","__filename":"docs/usage/gh-pages.md","__url":"/docs/usage/gh-pages/","__resourceUrl":"/docs/usage/gh-pages/index.html","__dataUrl":"/docs/usage/gh-pages/index.html.fb814dde442f9eb716265702d0bfda24.json"}