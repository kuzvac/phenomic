{"head":{"title":"Automatic deployment on GitHub Pages"},"body":"<p><strong>Be sure that you use the <code>statinamic.CNAME</code> option in your\n``package.json`. See <a href=\"./configuration/\">Configuration</a></strong></p>\n<p>You will have multiples possibilities to deploy your <code>dist</code> folder on the\n<code>gh-pages</code> branch.\nYou can use your own method, using something like</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/gh-pages\">gh-pages</a></li>\n<li><a href=\"https://www.npmjs.com/package/buildbranch\">buildbranch</a></li>\n<li><a href=\"https://github.com/X1011/git-directory-deploy\">git-directory-deploy</a></li>\n</ul>\n<hr>\n<p>The following instructions show you how to do it with <code>git-directory-deploy</code>,\nbut it should not be very different other solutions.</p>\n<p>This script is pretty solid, works on Travis-CI, play well with unstashed\nchanges and handle errors pretty nicely.</p>\n<h3 id=\"get-the-dependency\"><a class=\"markdownIt-Anchor\" href=\"#get-the-dependency\">#</a> Get the dependency</h3>\n<p>The following instructions will get the <code>deploy.sh</code> script for you, at the right\nplace</p>\n<pre><code class=\"language-console\">$ <span class=\"hljs-keyword\">cd</span> scripts\n$ wget http<span class=\"hljs-variable\">s:</span>//github.<span class=\"hljs-keyword\">com</span>/X1011/git-directory-deploy/raw/master/deploy.<span class=\"hljs-keyword\">sh</span>\n$ chmod +<span class=\"hljs-keyword\">x</span> deploy.<span class=\"hljs-keyword\">sh</span>\n$ <span class=\"hljs-keyword\">cd</span> ..</code></pre>\n<p>By default, this script will deploy the <code>dist/</code> folder on your <code>gh-pages</code>\nbranch.</p>\n<h3 id=\"add-a-command-to-deploy\"><a class=\"markdownIt-Anchor\" href=\"#add-a-command-to-deploy\">#</a> Add a command to deploy</h3>\n<p>In your <code>package.json</code>, add the following items under the <code>scripts</code> section</p>\n<pre><code class=\"language-json\">{\n  \"<span class=\"hljs-attribute\">scripts</span>\": <span class=\"hljs-value\">{\n    \"<span class=\"hljs-attribute\">predeploy</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"npm run build\"</span></span>,\n    \"<span class=\"hljs-attribute\">deploy</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"./scripts/deploy.sh\"</span>\n  </span>}\n</span>}</code></pre>\n<p>Now run</p>\n<pre><code class=\"language-console\">$ npm <span class=\"hljs-command\">run</span> deploy</code></pre>\n<p>It should be good!</p>\n<h4 id=\"automatically-with-travis-ci\"><a class=\"markdownIt-Anchor\" href=\"#automatically-with-travis-ci\">#</a> Automatically with Travis-CI</h4>\n<p>Here is one quick and easy way to setup automatic deployment on each commit\npushed to master that should take a couple of minutes to setup:</p>\n<h5 id=\"enable-travis-ci-for-your-repository\"><a class=\"markdownIt-Anchor\" href=\"#enable-travis-ci-for-your-repository\">#</a> Enable Travis-CI for your repository</h5>\n<ul>\n<li><a href=\"https://travis-ci.org/profile\">https://travis-ci.org/profile</a></li>\n</ul>\n<p>You may need to hit the <code>Sync</code> button to see your repository if itâ€™s need.</p>\n<h5 id=\"create-a-travis-yml\"><a class=\"markdownIt-Anchor\" href=\"#create-a-travis-yml\">#</a> Create a <code>.travis.yml</code></h5>\n<pre><code class=\"language-yml\">language: node_js\nnode_js:\n  - <span class=\"hljs-string\">'5'</span>\n  - <span class=\"hljs-string\">'4'</span>\n\n<span class=\"hljs-comment\"># (by default, Travis will run \"npm test\" script when language is node_js)</span>\n\n<span class=\"hljs-comment\"># deploy is run after \"npm test\"</span>\ndeploy:\n  <span class=\"hljs-comment\"># keep build we just made with \"npm test\" (dist/)</span>\n  skip_cleanup: <span class=\"hljs-constant\">true</span>\n\n  <span class=\"hljs-comment\"># define the script to use for deployment</span>\n  provider: script\n  script: ./scripts/deploy.sh\n\n  <span class=\"hljs-comment\"># only run on one version of node (v5 here)</span>\n  <span class=\"hljs-command\"><span class=\"hljs-keyword\">on</span>:</span>\n    branch: master\n    node: <span class=\"hljs-string\">'5'</span>\n\nenv:\n  <span class=\"hljs-built_in\">global</span>:\n    <span class=\"hljs-comment\"># for ./scripts/deploy.sh</span>\n    <span class=\"hljs-comment\"># AJUST THE REPO URL HERE</span>\n    <span class=\"hljs-comment\"># BECAREUL, KEEP .git AT THE END</span>\n    - GIT_DEPLOY_REPO=<span class=\"hljs-keyword\">https</span>://$GH_TOKEN@github.com/YOU/YOUR_REPO.git\n    - GIT_DEPLOY_DIR=dist\n    <span class=\"hljs-comment\"># GH_TOKEN</span>\n    <span class=\"hljs-comment\"># now we will have to add a github token, see doc below</span></code></pre>\n<h5 id=\"generate-a-new-token\"><a class=\"markdownIt-Anchor\" href=\"#generate-a-new-token\">#</a> Generate a new token</h5>\n<ul>\n<li><a href=\"https://github.com/settings/tokens/new\">https://github.com/settings/tokens/new</a></li>\n</ul>\n<p>With only <code>repo</code> or <code>public_repo</code> scopes.</p>\n<h5 id=\"copy-and-encrypt-this-new-token\"><a class=\"markdownIt-Anchor\" href=\"#copy-and-encrypt-this-new-token\">#</a> Copy and encrypt this new token</h5>\n<p><em>Note: replace <code>you/your_repo</code> and <code>your_token</code>.</em></p>\n<pre><code class=\"language-console\">$ sudo gem <span class=\"hljs-operator\"><span class=\"hljs-keyword\">install</span> travis\n$ travis <span class=\"hljs-keyword\">encrypt</span> <span class=\"hljs-comment\">--add --repo you/your_repo GH_TOKEN=your_token</span></span></code></pre>\n<h5 id=\"add-a-test-script-in-your-package-json-scripts-section\"><a class=\"markdownIt-Anchor\" href=\"#add-a-test-script-in-your-package-json-scripts-section\">#</a> Add a <code>test</code> script in your <code>package.json</code> <code>scripts</code> section</h5>\n<pre><code class=\"language-json\">{\n  \"<span class=\"hljs-attribute\">scripts</span>\": <span class=\"hljs-value\">{\n    \"<span class=\"hljs-attribute\">test</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"npm run build\"</span></span>,\n  }\n</span>}</code></pre>\n<p>Now, commit and push to master, wait a couple of minute and it should be good.</p>\n<p><strong>If you plan to rely on Travis only, you can probably remove <code>predeploy</code> and\n<code>deploy</code> script we defined earlier.</strong></p>\n","rawBody":"\n**Be sure that you use the ``statinamic.CNAME`` option in your\n``package.json`. See [Configuration](./configuration/)**\n\nYou will have multiples possibilities to deploy your `dist` folder on the\n`gh-pages` branch.\nYou can use your own method, using something like\n- [gh-pages](https://www.npmjs.com/package/gh-pages)\n- [buildbranch](https://www.npmjs.com/package/buildbranch)\n- [git-directory-deploy](https://github.com/X1011/git-directory-deploy)\n\n---\n\nThe following instructions show you how to do it with `git-directory-deploy`,\nbut it should not be very different other solutions.\n\nThis script is pretty solid, works on Travis-CI, play well with unstashed\nchanges and handle errors pretty nicely.\n\n### Get the dependency\n\nThe following instructions will get the `deploy.sh` script for you, at the right\nplace\n\n```console\n$ cd scripts\n$ wget https://github.com/X1011/git-directory-deploy/raw/master/deploy.sh\n$ chmod +x deploy.sh\n$ cd ..\n```\n\nBy default, this script will deploy the `dist/` folder on your `gh-pages`\nbranch.\n\n### Add a command to deploy\n\nIn your `package.json`, add the following items under the `scripts` section\n\n```json\n{\n  \"scripts\": {\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"./scripts/deploy.sh\"\n  }\n}\n```\n\nNow run\n\n```console\n$ npm run deploy\n```\n\nIt should be good!\n\n#### Automatically with Travis-CI\n\nHere is one quick and easy way to setup automatic deployment on each commit\npushed to master that should take a couple of minutes to setup:\n\n##### Enable Travis-CI for your repository\n\n- https://travis-ci.org/profile\n\nYou may need to hit the `Sync` button to see your repository if it's need.\n\n##### Create a `.travis.yml`\n\n```yml\nlanguage: node_js\nnode_js:\n  - '5'\n  - '4'\n\n# (by default, Travis will run \"npm test\" script when language is node_js)\n\n# deploy is run after \"npm test\"\ndeploy:\n  # keep build we just made with \"npm test\" (dist/)\n  skip_cleanup: true\n\n  # define the script to use for deployment\n  provider: script\n  script: ./scripts/deploy.sh\n\n  # only run on one version of node (v5 here)\n  on:\n    branch: master\n    node: '5'\n\nenv:\n  global:\n    # for ./scripts/deploy.sh\n    # AJUST THE REPO URL HERE\n    # BECAREUL, KEEP .git AT THE END\n    - GIT_DEPLOY_REPO=https://$GH_TOKEN@github.com/YOU/YOUR_REPO.git\n    - GIT_DEPLOY_DIR=dist\n    # GH_TOKEN\n    # now we will have to add a github token, see doc below\n```\n\n##### Generate a new token\n\n- https://github.com/settings/tokens/new\n\nWith only `repo` or `public_repo` scopes.\n\n##### Copy and encrypt this new token\n\n*Note: replace `you/your_repo` and `your_token`.*\n\n```console\n$ sudo gem install travis\n$ travis encrypt --add --repo you/your_repo GH_TOKEN=your_token\n```\n\n##### Add a `test` script in your `package.json` `scripts` section\n\n```json\n{\n  \"scripts\": {\n    \"test\": \"npm run build\",\n  }\n}\n```\n\nNow, commit and push to master, wait a couple of minute and it should be good.\n\n**If you plan to rely on Travis only, you can probably remove `predeploy` and\n`deploy` script we defined earlier.**\n","raw":"---\ntitle: Automatic deployment on GitHub Pages\n---\n\n**Be sure that you use the ``statinamic.CNAME`` option in your\n``package.json`. See [Configuration](./configuration/)**\n\nYou will have multiples possibilities to deploy your `dist` folder on the\n`gh-pages` branch.\nYou can use your own method, using something like\n- [gh-pages](https://www.npmjs.com/package/gh-pages)\n- [buildbranch](https://www.npmjs.com/package/buildbranch)\n- [git-directory-deploy](https://github.com/X1011/git-directory-deploy)\n\n---\n\nThe following instructions show you how to do it with `git-directory-deploy`,\nbut it should not be very different other solutions.\n\nThis script is pretty solid, works on Travis-CI, play well with unstashed\nchanges and handle errors pretty nicely.\n\n### Get the dependency\n\nThe following instructions will get the `deploy.sh` script for you, at the right\nplace\n\n```console\n$ cd scripts\n$ wget https://github.com/X1011/git-directory-deploy/raw/master/deploy.sh\n$ chmod +x deploy.sh\n$ cd ..\n```\n\nBy default, this script will deploy the `dist/` folder on your `gh-pages`\nbranch.\n\n### Add a command to deploy\n\nIn your `package.json`, add the following items under the `scripts` section\n\n```json\n{\n  \"scripts\": {\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"./scripts/deploy.sh\"\n  }\n}\n```\n\nNow run\n\n```console\n$ npm run deploy\n```\n\nIt should be good!\n\n#### Automatically with Travis-CI\n\nHere is one quick and easy way to setup automatic deployment on each commit\npushed to master that should take a couple of minutes to setup:\n\n##### Enable Travis-CI for your repository\n\n- https://travis-ci.org/profile\n\nYou may need to hit the `Sync` button to see your repository if it's need.\n\n##### Create a `.travis.yml`\n\n```yml\nlanguage: node_js\nnode_js:\n  - '5'\n  - '4'\n\n# (by default, Travis will run \"npm test\" script when language is node_js)\n\n# deploy is run after \"npm test\"\ndeploy:\n  # keep build we just made with \"npm test\" (dist/)\n  skip_cleanup: true\n\n  # define the script to use for deployment\n  provider: script\n  script: ./scripts/deploy.sh\n\n  # only run on one version of node (v5 here)\n  on:\n    branch: master\n    node: '5'\n\nenv:\n  global:\n    # for ./scripts/deploy.sh\n    # AJUST THE REPO URL HERE\n    # BECAREUL, KEEP .git AT THE END\n    - GIT_DEPLOY_REPO=https://$GH_TOKEN@github.com/YOU/YOUR_REPO.git\n    - GIT_DEPLOY_DIR=dist\n    # GH_TOKEN\n    # now we will have to add a github token, see doc below\n```\n\n##### Generate a new token\n\n- https://github.com/settings/tokens/new\n\nWith only `repo` or `public_repo` scopes.\n\n##### Copy and encrypt this new token\n\n*Note: replace `you/your_repo` and `your_token`.*\n\n```console\n$ sudo gem install travis\n$ travis encrypt --add --repo you/your_repo GH_TOKEN=your_token\n```\n\n##### Add a `test` script in your `package.json` `scripts` section\n\n```json\n{\n  \"scripts\": {\n    \"test\": \"npm run build\",\n  }\n}\n```\n\nNow, commit and push to master, wait a couple of minute and it should be good.\n\n**If you plan to rely on Travis only, you can probably remove `predeploy` and\n`deploy` script we defined earlier.**\n","__filename":"docs/usage/gh-pages.md","__url":"/statinamic/docs/usage/gh-pages/"}