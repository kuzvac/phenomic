{"head":{"title":"How to style your app/website in Statinamic","incomplete":true,"description":"Future-proof & Local CSS\n\nThe default boilerplate contains 2 essentials things so you can easily write\nCSS:\n\nPostCSS,\na modular tool that…"},"body":"<h2 id=\"future-proof--local-css\"><a href=\"#future-proof--local-css\" class=\"statinamic-HeadingAnchor\">#</a>Future-proof &amp; Local CSS</h2>\n<p>The default boilerplate contains 2 essentials things so you can easily write\nCSS:</p>\n<ul>\n<li><a href=\"https://github.com/postcss/postcss\">PostCSS</a>,\na modular tool that allows you to use future-proof and custom CSS syntax\n(by default, <a href=\"http://cssnext.io/\">postcss-cssnext</a> is enabled so you can use\na lot of new CSS features);</li>\n<li><a href=\"https://github.com/css-modules/css-modules\">CSS modules</a>,\nwhich allows you to have local CSS classnames in your React components.</li>\n</ul>\n<p>At first, you will probably find that not having global CSS is weird.\nBut the way the web and UI are evolving is clearly by following a component\napproach. You should think about UI modules and styles your component one by\none.</p>\n<p>If you need some global CSS variables, <a href=\"http://cssnext.io/usage/#features\">you can add some in the JavaScript\nconfiguration</a>.\n(but you should not use many of these).</p>\n<p><strong>ProTip™</strong>: For your layout, we advise you to use\n<a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">Flexbox</a>\nwhenever you can.</p>\n<p><em>If you think this brief documentation is not enough, feel free to open an\nissue.</em></p>\n<h3 id=\"why-not-inline-styles-instead-of-css\"><a href=\"#why-not-inline-styles-instead-of-css\" class=\"statinamic-HeadingAnchor\">#</a>Why not inline styles instead of CSS?</h3>\n<p>Unfortunately, inline styles don&#x27;t play well with pre-rendering for now. When\nwe build the static version, we don&#x27;t know where the site will be viewed on, so\nviewport adjustments can&#x27;t be done properly and will therefore result in some\nvisual changes/re-rendering.</p>\n<p>You can probably provide a fairly decent user experience with smooth\nre-rendering, but it isn&#x27;t an easy task. However, please feel free to open an\nissue to discuss it if you think that this isn&#x27;t the case!</p>\n","rawBody":"\n## Future-proof & Local CSS\n\nThe default boilerplate contains 2 essentials things so you can easily write\nCSS:\n\n- [PostCSS](https://github.com/postcss/postcss),\na modular tool that allows you to use future-proof and custom CSS syntax\n(by default, [postcss-cssnext](http://cssnext.io/) is enabled so you can use\na lot of new CSS features);\n- [CSS modules](https://github.com/css-modules/css-modules),\nwhich allows you to have local CSS classnames in your React components.\n\nAt first, you will probably find that not having global CSS is weird.\nBut the way the web and UI are evolving is clearly by following a component\napproach. You should think about UI modules and styles your component one by\none.\n\nIf you need some global CSS variables, [you can add some in the JavaScript\nconfiguration](http://cssnext.io/usage/#features).\n(but you should not use many of these).\n\n**ProTip™**: For your layout, we advise you to use\n[Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\nwhenever you can.\n\n_If you think this brief documentation is not enough, feel free to open an\nissue._\n\n### Why not inline styles instead of CSS?\n\nUnfortunately, inline styles don't play well with pre-rendering for now. When\nwe build the static version, we don't know where the site will be viewed on, so\nviewport adjustments can't be done properly and will therefore result in some\nvisual changes/re-rendering.\n\nYou can probably provide a fairly decent user experience with smooth\nre-rendering, but it isn't an easy task. However, please feel free to open an\nissue to discuss it if you think that this isn't the case!\n","raw":"---\ntitle: How to style your app/website in Statinamic\nincomplete: true\n---\n\n## Future-proof & Local CSS\n\nThe default boilerplate contains 2 essentials things so you can easily write\nCSS:\n\n- [PostCSS](https://github.com/postcss/postcss),\na modular tool that allows you to use future-proof and custom CSS syntax\n(by default, [postcss-cssnext](http://cssnext.io/) is enabled so you can use\na lot of new CSS features);\n- [CSS modules](https://github.com/css-modules/css-modules),\nwhich allows you to have local CSS classnames in your React components.\n\nAt first, you will probably find that not having global CSS is weird.\nBut the way the web and UI are evolving is clearly by following a component\napproach. You should think about UI modules and styles your component one by\none.\n\nIf you need some global CSS variables, [you can add some in the JavaScript\nconfiguration](http://cssnext.io/usage/#features).\n(but you should not use many of these).\n\n**ProTip™**: For your layout, we advise you to use\n[Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\nwhenever you can.\n\n_If you think this brief documentation is not enough, feel free to open an\nissue._\n\n### Why not inline styles instead of CSS?\n\nUnfortunately, inline styles don't play well with pre-rendering for now. When\nwe build the static version, we don't know where the site will be viewed on, so\nviewport adjustments can't be done properly and will therefore result in some\nvisual changes/re-rendering.\n\nYou can probably provide a fairly decent user experience with smooth\nre-rendering, but it isn't an easy task. However, please feel free to open an\nissue to discuss it if you think that this isn't the case!\n","__filename":"docs/usage/styling.md","__url":"/docs/usage/styling/","__resourceUrl":"/docs/usage/styling/index.html","__dataUrl":"/docs/usage/styling/index.html.752a50a7050b52cb0f04b77d6c6740b3.json"}