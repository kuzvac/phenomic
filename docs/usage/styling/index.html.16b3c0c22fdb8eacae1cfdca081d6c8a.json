{"head":{"title":"How to style your app/website in Statinamic","incomplete":true,"description":"Future-proof & Local CSS\n\nThe default boilerplate contains 2 essentials things so you can easily write\nCSS:\n\nPostCSS,\na modular tool that…"},"body":"<h2 id=\"future-proof-local-css\"><a class=\"markdownIt-Anchor\" href=\"#future-proof-local-css\">#</a> Future-proof &amp; Local CSS</h2>\n<p>The default boilerplate contains 2 essentials things so you can easily write\nCSS:</p>\n<ul>\n<li><a href=\"https://github.com/postcss/postcss\">PostCSS</a>,\na modular tool that allows you to use future-proof and custom CSS syntax\n(by default, <a href=\"http://cssnext.io/\">postcss-cssnext</a> is enabled so you can use\na lot of new CSS things);</li>\n<li><a href=\"https://github.com/css-modules/css-modules\">CSS modules</a>,\nwhich allows you to have local CSS classnames in your React components.</li>\n</ul>\n<p>At first, you will probably found that not having global CSS is weird.\nBut the way the web and UI are evolving is clearly by following a component\napproach. You should think about UI modules and styles your component on by one.\nIf you need some global CSS variables, <a href=\"http://cssnext.io/usage/#features\">you can add some in the JavaScript\nconfiguration</a>.\n(but you should not use a lot).</p>\n<p><strong>ProTip™</strong>: For you layout, we advice you to use\n<a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">Flexbox</a>\nwhenever you can.</p>\n<p><em>If you think this brief documentation is not enough, feel free to open an\nissue.</em></p>\n<h3 id=\"why-not-inline-styles-instead-of-css\"><a class=\"markdownIt-Anchor\" href=\"#why-not-inline-styles-instead-of-css\">#</a> Why not inline styles instead of CSS?</h3>\n<p>Sadly, inline styles don’t play well with pre rendering (at least yet).\nWhen we build the static version, we don’t know the device where we are going\nto be displayed on, so viewport adjustments can’t be done properly and will\nresult in some visual changes/rerendering.\nYou can probably provide a “not so bad” UX with the re-rendering is made\nsmoothly but it’s not an easy thing. If you think it easy, feel free to open an\nissue to discuss about that!</p>\n","rawBody":"\n## Future-proof & Local CSS\n\nThe default boilerplate contains 2 essentials things so you can easily write\nCSS:\n\n- [PostCSS](https://github.com/postcss/postcss),\na modular tool that allows you to use future-proof and custom CSS syntax\n(by default, [postcss-cssnext](http://cssnext.io/) is enabled so you can use\na lot of new CSS things);\n- [CSS modules](https://github.com/css-modules/css-modules),\nwhich allows you to have local CSS classnames in your React components.\n\nAt first, you will probably found that not having global CSS is weird.\nBut the way the web and UI are evolving is clearly by following a component\napproach. You should think about UI modules and styles your component on by one.\nIf you need some global CSS variables, [you can add some in the JavaScript\nconfiguration](http://cssnext.io/usage/#features).\n(but you should not use a lot).\n\n**ProTip™**: For you layout, we advice you to use\n[Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\nwhenever you can.\n\n_If you think this brief documentation is not enough, feel free to open an\nissue._\n\n### Why not inline styles instead of CSS?\n\nSadly, inline styles don't play well with pre rendering (at least yet).\nWhen we build the static version, we don't know the device where we are going\nto be displayed on, so viewport adjustments can't be done properly and will\nresult in some visual changes/rerendering.\nYou can probably provide a \"not so bad\" UX with the re-rendering is made\nsmoothly but it's not an easy thing. If you think it easy, feel free to open an\nissue to discuss about that!\n","raw":"---\ntitle: How to style your app/website in Statinamic\nincomplete: true\n---\n\n## Future-proof & Local CSS\n\nThe default boilerplate contains 2 essentials things so you can easily write\nCSS:\n\n- [PostCSS](https://github.com/postcss/postcss),\na modular tool that allows you to use future-proof and custom CSS syntax\n(by default, [postcss-cssnext](http://cssnext.io/) is enabled so you can use\na lot of new CSS things);\n- [CSS modules](https://github.com/css-modules/css-modules),\nwhich allows you to have local CSS classnames in your React components.\n\nAt first, you will probably found that not having global CSS is weird.\nBut the way the web and UI are evolving is clearly by following a component\napproach. You should think about UI modules and styles your component on by one.\nIf you need some global CSS variables, [you can add some in the JavaScript\nconfiguration](http://cssnext.io/usage/#features).\n(but you should not use a lot).\n\n**ProTip™**: For you layout, we advice you to use\n[Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\nwhenever you can.\n\n_If you think this brief documentation is not enough, feel free to open an\nissue._\n\n### Why not inline styles instead of CSS?\n\nSadly, inline styles don't play well with pre rendering (at least yet).\nWhen we build the static version, we don't know the device where we are going\nto be displayed on, so viewport adjustments can't be done properly and will\nresult in some visual changes/rerendering.\nYou can probably provide a \"not so bad\" UX with the re-rendering is made\nsmoothly but it's not an easy thing. If you think it easy, feel free to open an\nissue to discuss about that!\n","__filename":"docs/usage/styling.md","__url":"/docs/usage/styling/","__resourceUrl":"/docs/usage/styling/index.html","__dataUrl":"/docs/usage/styling/index.html.16b3c0c22fdb8eacae1cfdca081d6c8a.json"}