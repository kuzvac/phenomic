{"head":{"title":"How to setup Statinamic"},"body":"<p>Statinamic require a minimal boilerplate, in order to provide you some\nflexibility.\n, you can just run the following:</p>\n<h2 id=\"the-boilerplate\"><a class=\"markdownIt-Anchor\" href=\"#the-boilerplate\">#</a> The boilerplate</h2>\n<p>To get the default boilerplate,\ncopy <a href=\"https://github.com/MoOx/statinamic/tree/master/src/boilerplate\">statinamic/src/boilerplate</a>\ninto a (fresh) local directory.</p>\n<p><em>Feel free to adjust the <code>package.json</code> to your need.\nJust keep the <code>scripts</code> <code>start</code> and <code>static</code>.</em></p>\n<p>When you have the boilerplate in place:</p>\n<pre><code class=\"language-console\">$ npm install --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span> statinamic</code></pre>\n<p>For npm@3+ (to get required <code>peerDependencies</code>):</p>\n<pre><code class=\"language-console\">$ ./node_modules/.<span class=\"hljs-keyword\">bin/statinamic </span>setup</code></pre>\n<p>Note: You can use <code>$ statinamic</code> directly by adding <code>./node_modules/.bin</code> to\nyour <code>PATH</code>.\nIt’s a good way to avoid global npm package while still being able to use\n<code>bin</code>s from local <code>node_modules</code>.</p>\n<h3 id=\"more-explanation-about-the-boilerplate\"><a class=\"markdownIt-Anchor\" href=\"#more-explanation-about-the-boilerplate\">#</a> More explanation about the boilerplate</h3>\n<p>The default boilerplate:</p>\n<ul>\n<li>initialize your bundles\n(\n<a href=\"https://github.com/MoOx/statinamic/blob/master/src/boilerplate/scripts/index-client.js\">client</a> +\n<a href=\"https://github.com/MoOx/statinamic/blob/master/src/boilerplate/scripts/index-static.js\">static</a>\n) with:\n<ul>\n<li>your layout <a href=\"https://github.com/MoOx/statinamic/blob/master/src/boilerplate/web_modules/app/pageComponents.js\">components</a></li>\n<li>some <a href=\"https://github.com/MoOx/statinamic/blob/master/src/boilerplate/web_modules/app/routes.js\">routes</a></li>\n<li>a <a href=\"https://github.com/MoOx/statinamic/blob/master/src/boilerplate/web_modules/app/store.js\">store</a> to keep data in memory</li>\n</ul>\n</li>\n<li>create your <a href=\"https://github.com/MoOx/statinamic/blob/master/src/boilerplate/scripts/build.js\">build script</a> so you can:\n<ul>\n<li>define your configuration\n(eg: webpack loaders to add your favorite css preprocessor)</li>\n<li>run the dev server (<code>(babel-)node build --server --dev</code>)</li>\n<li>build the static version for production (<code>(babel-)node build --static --production</code>)</li>\n</ul>\n</li>\n</ul>\n<p>You might as well need to:</p>\n<ul>\n<li>write or reuse <a href=\"http://react-components.com/\">React components</a></li>\n<li>tweak <a href=\"http://webpack.github.io/docs\">webpack configuration</a> in the build script\nso you can consume images, svg, css or whatever you want.</li>\n</ul>\n<h2 id=\"linting\"><a class=\"markdownIt-Anchor\" href=\"#linting\">#</a> Linting</h2>\n<p>Linting your code is a good practice.\nYou can easily add a good convention by adding\n<a href=\"http://eslint.org/\">ESLint</a> with a existing config like\n<a href=\"https://github.com/MoOx/eslint-config-i-am-meticulous\">eslint-config-i-am-meticulous</a></p>\n<p>By default, ESLint and the above config is already added in your dependencies.<br>\nYou just need to add your <code>package.json</code> the following eslint config :</p>\n<pre><code class=\"language-json\">{\n  \"<span class=\"hljs-attribute\">eslintConfig</span>\": <span class=\"hljs-value\">{\n    \"<span class=\"hljs-attribute\">extends</span>\": <span class=\"hljs-value\">[\n      <span class=\"hljs-string\">\"eslint-config-i-am-meticulous\"</span>,\n      <span class=\"hljs-string\">\"eslint-config-i-am-meticulous/react\"</span>\n    ]\n  </span>}\n</span>}</code></pre>\n<h2 id=\"hot-reloading-visual-errors\"><a class=\"markdownIt-Anchor\" href=\"#hot-reloading-visual-errors\">#</a> Hot reloading &amp; Visual Errors</h2>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1539088/11611771/ae1a6bd8-9bac-11e5-9206-42447e0fe064.gif\" alt=\"hmre\"></p>\n<p>In order to benefit of hot-loading and visual javascript errors, you can add\na babel preset:</p>\n<pre><code class=\"language-console\">$ npm <span class=\"hljs-tag\">i</span> -D babel-preset-react-hmre</code></pre>\n<pre><code class=\"language-json\">{\n  \"<span class=\"hljs-attribute\">babel</span>\": <span class=\"hljs-value\">{\n    \"<span class=\"hljs-attribute\">presets</span>\": <span class=\"hljs-value\">[\n      <span class=\"hljs-string\">\"react\"</span>,\n      <span class=\"hljs-string\">\"es2015\"</span>,\n      <span class=\"hljs-string\">\"stage-0\"</span>\n    ]</span>,\n    \"<span class=\"hljs-attribute\">env</span>\": <span class=\"hljs-value\">{\n      \"<span class=\"hljs-attribute\">development</span>\": <span class=\"hljs-value\">{\n        \"<span class=\"hljs-attribute\">presets</span>\": <span class=\"hljs-value\">[\n          <span class=\"hljs-string\">\"react-hmre\"</span>\n        ]\n      </span>}\n    </span>}\n  </span>}\n</span>}</code></pre>\n<hr>\n<h2 id=\"explanation-about-how-the-engine-works\"><a class=\"markdownIt-Anchor\" href=\"#explanation-about-how-the-engine-works\">#</a> Explanation about how the engine works</h2>\n<p>During the build process, markdown files are parsed, and transformed as JSON\nfiles (one part with the YAML header meta informations, one part with the body\nas HTML).\nSo both client and server can easily consume markdown files (as json) in order\nto render pages from React components. That’s it !</p>\n<p>On top of that you can add pretty much whatever you want to write styles the way\nyou like (CSS, inlines styles…) and you can even create your own pages from\nplain React components. This generator is just an helper.</p>\n<h3 id=\"packages-used\"><a class=\"markdownIt-Anchor\" href=\"#packages-used\">#</a> Packages used</h3>\n<ul>\n<li><a href=\"http://babeljs.io\">Babel</a>\nfor writing ES6 and ES7</li>\n<li><a href=\"http://webpack.github.io\">Webpack</a>\nfor bundling,</li>\n<li><a href=\"http://expressjs.com/\">Express</a> with some middlewares for development:\n<ul>\n<li><a href=\"http://webpack.github.io/docs/webpack-dev-server.html\">Webpack Dev Middleware</a>\nfor watching</li>\n<li><a href=\"https://github.com/glenjamin/webpack-hot-middleware\">Webpack Hot Middleware</a>\nfor hot reload</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/facebook/react\">React</a>\nfor writing UI</li>\n<li><a href=\"https://github.com/rackt/react-router\">React Router</a>\nfor routing</li>\n<li><a href=\"https://github.com/gaearon/redux\">Redux</a>\nfor handling application state\n(a better <a href=\"http://facebook.github.io/flux/\">Flux</a>implementation)</li>\n<li><a href=\"https://github.com/gaearon/redux-devtools\">Redux Dev Tools</a>\nfor awesome DX (developer experience).</li>\n<li><a href=\"https://github.com/nfl/react-helmet\">react-helmet</a>\nfor handling pages meta tags (title and meta…)</li>\n</ul>\n<h2 id=\"some-packages-that-might-helps\"><a class=\"markdownIt-Anchor\" href=\"#some-packages-that-might-helps\">#</a> Some packages that might helps</h2>\n<ul>\n<li><a href=\"https://github.com/sindresorhus/ava\">ava</a>\nfor unit tests.</li>\n</ul>\n","rawBody":"\nStatinamic require a minimal boilerplate, in order to provide you some\nflexibility.\n, you can just run the following:\n\n## The boilerplate\n\nTo get the default boilerplate,\ncopy [statinamic/src/boilerplate](https://github.com/MoOx/statinamic/tree/master/src/boilerplate)\ninto a (fresh) local directory.\n\n_Feel free to adjust the `package.json` to your need.\nJust keep the `scripts` `start` and `static`._\n\nWhen you have the boilerplate in place:\n\n```console\n$ npm install --save-dev statinamic\n```\n\nFor npm@3+ (to get required `peerDependencies`):\n\n```console\n$ ./node_modules/.bin/statinamic setup\n```\n\nNote: You can use `$ statinamic` directly by adding `./node_modules/.bin` to\nyour `PATH`.\nIt's a good way to avoid global npm package while still being able to use\n`bin`s from local `node_modules`.\n\n### More explanation about the boilerplate\n\nThe default boilerplate:\n\n* initialize your bundles\n  (\n    [client](https://github.com/MoOx/statinamic/blob/master/src/boilerplate/scripts/index-client.js) +\n    [static](https://github.com/MoOx/statinamic/blob/master/src/boilerplate/scripts/index-static.js)\n  ) with:\n  - your layout [components](https://github.com/MoOx/statinamic/blob/master/src/boilerplate/web_modules/app/pageComponents.js)\n  - some [routes](https://github.com/MoOx/statinamic/blob/master/src/boilerplate/web_modules/app/routes.js)\n  - a [store](https://github.com/MoOx/statinamic/blob/master/src/boilerplate/web_modules/app/store.js) to keep data in memory\n* create your [build script](https://github.com/MoOx/statinamic/blob/master/src/boilerplate/scripts/build.js) so you can:\n  * define your configuration\n    (eg: webpack loaders to add your favorite css preprocessor)\n  * run the dev server (`(babel-)node build --server --dev`)\n  * build the static version for production (`(babel-)node build --static --production`)\n\nYou might as well need to:\n\n* write or reuse [React components](http://react-components.com/)\n* tweak [webpack configuration](http://webpack.github.io/docs) in the build script\n  so you can consume images, svg, css or whatever you want.\n\n## Linting\n\nLinting your code is a good practice.\nYou can easily add a good convention by adding\n[ESLint](http://eslint.org/) with a existing config like\n[eslint-config-i-am-meticulous](https://github.com/MoOx/eslint-config-i-am-meticulous)\n\nBy default, ESLint and the above config is already added in your dependencies.  \nYou just need to add your `package.json` the following eslint config :\n\n```json\n{\n  \"eslintConfig\": {\n    \"extends\": [\n      \"eslint-config-i-am-meticulous\",\n      \"eslint-config-i-am-meticulous/react\"\n    ]\n  }\n}\n```\n\n## Hot reloading & Visual Errors\n\n![hmre](https://cloud.githubusercontent.com/assets/1539088/11611771/ae1a6bd8-9bac-11e5-9206-42447e0fe064.gif)\n\nIn order to benefit of hot-loading and visual javascript errors, you can add\na babel preset:\n\n```console\n$ npm i -D babel-preset-react-hmre\n```\n\n```json\n{\n  \"babel\": {\n    \"presets\": [\n      \"react\",\n      \"es2015\",\n      \"stage-0\"\n    ],\n    \"env\": {\n      \"development\": {\n        \"presets\": [\n          \"react-hmre\"\n        ]\n      }\n    }\n  }\n}\n```\n\n---\n\n## Explanation about how the engine works\n\nDuring the build process, markdown files are parsed, and transformed as JSON\nfiles (one part with the YAML header meta informations, one part with the body\nas HTML).\nSo both client and server can easily consume markdown files (as json) in order\nto render pages from React components. That's it !\n\nOn top of that you can add pretty much whatever you want to write styles the way\nyou like (CSS, inlines styles...) and you can even create your own pages from\nplain React components. This generator is just an helper.\n\n### Packages used\n\n* [Babel](http://babeljs.io)\n  for writing ES6 and ES7\n* [Webpack](http://webpack.github.io)\n  for bundling,\n* [Express](http://expressjs.com/) with some middlewares for development:\n  * [Webpack Dev Middleware](http://webpack.github.io/docs/webpack-dev-server.html)\n    for watching\n  * [Webpack Hot Middleware](https://github.com/glenjamin/webpack-hot-middleware)\n    for hot reload\n* [React](https://github.com/facebook/react)\n  for writing UI\n* [React Router](https://github.com/rackt/react-router)\n  for routing\n* [Redux](https://github.com/gaearon/redux)\n  for handling application state\n  (a better [Flux](http://facebook.github.io/flux/)implementation)\n* [Redux Dev Tools](https://github.com/gaearon/redux-devtools)\n  for awesome DX (developer experience).\n* [react-helmet](https://github.com/nfl/react-helmet)\n  for handling pages meta tags (title and meta...)\n\n## Some packages that might helps\n\n* [ava](https://github.com/sindresorhus/ava)\n  for unit tests.\n","raw":"---\ntitle: How to setup Statinamic\n---\n\nStatinamic require a minimal boilerplate, in order to provide you some\nflexibility.\n, you can just run the following:\n\n## The boilerplate\n\nTo get the default boilerplate,\ncopy [statinamic/src/boilerplate](https://github.com/MoOx/statinamic/tree/master/src/boilerplate)\ninto a (fresh) local directory.\n\n_Feel free to adjust the `package.json` to your need.\nJust keep the `scripts` `start` and `static`._\n\nWhen you have the boilerplate in place:\n\n```console\n$ npm install --save-dev statinamic\n```\n\nFor npm@3+ (to get required `peerDependencies`):\n\n```console\n$ ./node_modules/.bin/statinamic setup\n```\n\nNote: You can use `$ statinamic` directly by adding `./node_modules/.bin` to\nyour `PATH`.\nIt's a good way to avoid global npm package while still being able to use\n`bin`s from local `node_modules`.\n\n### More explanation about the boilerplate\n\nThe default boilerplate:\n\n* initialize your bundles\n  (\n    [client](https://github.com/MoOx/statinamic/blob/master/src/boilerplate/scripts/index-client.js) +\n    [static](https://github.com/MoOx/statinamic/blob/master/src/boilerplate/scripts/index-static.js)\n  ) with:\n  - your layout [components](https://github.com/MoOx/statinamic/blob/master/src/boilerplate/web_modules/app/pageComponents.js)\n  - some [routes](https://github.com/MoOx/statinamic/blob/master/src/boilerplate/web_modules/app/routes.js)\n  - a [store](https://github.com/MoOx/statinamic/blob/master/src/boilerplate/web_modules/app/store.js) to keep data in memory\n* create your [build script](https://github.com/MoOx/statinamic/blob/master/src/boilerplate/scripts/build.js) so you can:\n  * define your configuration\n    (eg: webpack loaders to add your favorite css preprocessor)\n  * run the dev server (`(babel-)node build --server --dev`)\n  * build the static version for production (`(babel-)node build --static --production`)\n\nYou might as well need to:\n\n* write or reuse [React components](http://react-components.com/)\n* tweak [webpack configuration](http://webpack.github.io/docs) in the build script\n  so you can consume images, svg, css or whatever you want.\n\n## Linting\n\nLinting your code is a good practice.\nYou can easily add a good convention by adding\n[ESLint](http://eslint.org/) with a existing config like\n[eslint-config-i-am-meticulous](https://github.com/MoOx/eslint-config-i-am-meticulous)\n\nBy default, ESLint and the above config is already added in your dependencies.  \nYou just need to add your `package.json` the following eslint config :\n\n```json\n{\n  \"eslintConfig\": {\n    \"extends\": [\n      \"eslint-config-i-am-meticulous\",\n      \"eslint-config-i-am-meticulous/react\"\n    ]\n  }\n}\n```\n\n## Hot reloading & Visual Errors\n\n![hmre](https://cloud.githubusercontent.com/assets/1539088/11611771/ae1a6bd8-9bac-11e5-9206-42447e0fe064.gif)\n\nIn order to benefit of hot-loading and visual javascript errors, you can add\na babel preset:\n\n```console\n$ npm i -D babel-preset-react-hmre\n```\n\n```json\n{\n  \"babel\": {\n    \"presets\": [\n      \"react\",\n      \"es2015\",\n      \"stage-0\"\n    ],\n    \"env\": {\n      \"development\": {\n        \"presets\": [\n          \"react-hmre\"\n        ]\n      }\n    }\n  }\n}\n```\n\n---\n\n## Explanation about how the engine works\n\nDuring the build process, markdown files are parsed, and transformed as JSON\nfiles (one part with the YAML header meta informations, one part with the body\nas HTML).\nSo both client and server can easily consume markdown files (as json) in order\nto render pages from React components. That's it !\n\nOn top of that you can add pretty much whatever you want to write styles the way\nyou like (CSS, inlines styles...) and you can even create your own pages from\nplain React components. This generator is just an helper.\n\n### Packages used\n\n* [Babel](http://babeljs.io)\n  for writing ES6 and ES7\n* [Webpack](http://webpack.github.io)\n  for bundling,\n* [Express](http://expressjs.com/) with some middlewares for development:\n  * [Webpack Dev Middleware](http://webpack.github.io/docs/webpack-dev-server.html)\n    for watching\n  * [Webpack Hot Middleware](https://github.com/glenjamin/webpack-hot-middleware)\n    for hot reload\n* [React](https://github.com/facebook/react)\n  for writing UI\n* [React Router](https://github.com/rackt/react-router)\n  for routing\n* [Redux](https://github.com/gaearon/redux)\n  for handling application state\n  (a better [Flux](http://facebook.github.io/flux/)implementation)\n* [Redux Dev Tools](https://github.com/gaearon/redux-devtools)\n  for awesome DX (developer experience).\n* [react-helmet](https://github.com/nfl/react-helmet)\n  for handling pages meta tags (title and meta...)\n\n## Some packages that might helps\n\n* [ava](https://github.com/sindresorhus/ava)\n  for unit tests.\n","__filename":"docs/setup.md","__url":"/statinamic/docs/setup/"}