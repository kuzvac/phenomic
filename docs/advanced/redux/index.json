{"head":{"title":"Advanced usage of Redux","incomplete":true},"body":"<h2 id=\"adding-custom-redux-reducers\"><a class=\"markdownIt-Anchor\" href=\"#adding-custom-redux-reducers\">#</a> Adding custom Redux reducers</h2>\n<p>Here is an example of a store that will allow you to add\nwith your own reducers, <em>with support of hot loading</em>.</p>\n<p>It is based on the default boilerplate and add (and combine) your custom\nreducers.</p>\n<pre><code class=\"language-js\">import { combineReducers } from \"redux\"\nimport createStore from \"statinamic/lib/redux/createStore\"\nimport * as statinamicReducers from \"statinamic/lib/redux/modules\"\nimport * as reducers from \"app/redux\"\n\n// for initialState\nimport * as layouts from \"layouts\"\n\nconst store = createStore(\n  // here we combine statinamic required reducers and your custom ones\n  combineReducers({\n    ...statinamicReducers,\n    ...reducers,\n  }),\n\n  // initialState\n  {\n    ...(typeof window !== \"undefined\") &amp;&amp; window.__INITIAL_STATE__,\n\n    // static build optimization\n    ...__PROD__ &amp;&amp; {\n      collection:\n        require(\"statinamic/lib/md-collection-loader/cache\").default,\n    },\n\n    layouts,\n  }\n)\n\n// webpack hot loading\nif (module.hot) {\n  // enable hot module replacement for reducers\n  module.hot.accept([\n    // \"statinamic/lib/redux/modules\",\n    // will not be updated since it's a lib :)\n    // but will still needs to be required\n\n    // hot load your reducers\n    \"app/redux/modules\",\n  ], () =&gt; {\n    const updatedReducer = combineReducers({\n      // we still need to combine all reducers\n      ...require(\"statinamic/lib/redux/modules\"),\n      ...require(\"app/redux/modules\"),\n    })\n    store.replaceReducer(updatedReducer)\n  })\n}\n\nexport default store</code></pre>\n<h2 id=\"adding-custom-middlewares-and-store-enhancers-to-redux-store\"><a class=\"markdownIt-Anchor\" href=\"#adding-custom-middlewares-and-store-enhancers-to-redux-store\">#</a> Adding custom middlewares and store enhancers to Redux store</h2>\n<p><code>statinamic/lib/redux/createStore</code> accepts two extra parameters that\nallow you to pass custom middlewares and store enhancers</p>\n<p>Here is an example of adding\n<a href=\"https://github.com/fcomb/redux-logger\">redux-logger</a> and\n<a href=\"https://github.com/treasure-data/redux-search\">redux-search</a>\nto Redux store</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">import</span> { combineReducers } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"redux\"</span>\n<span class=\"hljs-keyword\">import</span> createStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"statinamic/lib/redux/createStore\"</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> statinamicReducers <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"statinamic/lib/redux/modules\"</span>\n<span class=\"hljs-keyword\">import</span> minifyCollection <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"statinamic/lib/md-collection-loader/minify\"</span>\n<span class=\"hljs-keyword\">import</span> { reducer <span class=\"hljs-keyword\">as</span> searchReducer, reduxSearch } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"redux-search\"</span>\n<span class=\"hljs-keyword\">import</span> createLogger <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"redux-logger\"</span>\n\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> layouts <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"layouts\"</span>\n\nconst extraMiddlewares = { createLogger() }\nconst extraStoreEnhancers = {\n  reduxSearch({\n    resourceIndexes: {\n      books: [<span class=\"hljs-string\">'author'</span>, <span class=\"hljs-string\">'title'</span>]\n    },\n    resourceSelector: (resourceName, state) =&gt; {\n      return state.resources.get(resourceName)\n    }\n  })\n}\n\nconst store = createStore(\n  combineReducers({\n    ...statinamicReducers,\n    ...{\n      search: searchReducer\n    }\n  }),\n\n  // initialState\n  {\n    ...(typeof window !== <span class=\"hljs-string\">\"undefined\"</span>) &amp;&amp; window.__INITIAL_STATE__,\n\n    // static build optimization\n    ...__PROD__ &amp;&amp; {\n      collection:\n        minifyCollection(require(<span class=\"hljs-string\">\"statinamic/lib/md-collection-loader/cache\"</span>)),\n    },\n\n    layouts,\n  },\n  extraMiddlewares,\n  extraStoreEnhancers,\n\n)\n\nexport default store</code></pre>\n","rawBody":"\n## Adding custom Redux reducers\n\nHere is an example of a store that will allow you to add\nwith your own reducers, _with support of hot loading_.\n\nIt is based on the default boilerplate and add (and combine) your custom\nreducers.\n\n```js\nimport { combineReducers } from \"redux\"\nimport createStore from \"statinamic/lib/redux/createStore\"\nimport * as statinamicReducers from \"statinamic/lib/redux/modules\"\nimport * as reducers from \"app/redux\"\n\n// for initialState\nimport * as layouts from \"layouts\"\n\nconst store = createStore(\n  // here we combine statinamic required reducers and your custom ones\n  combineReducers({\n    ...statinamicReducers,\n    ...reducers,\n  }),\n\n  // initialState\n  {\n    ...(typeof window !== \"undefined\") && window.__INITIAL_STATE__,\n\n    // static build optimization\n    ...__PROD__ && {\n      collection:\n        require(\"statinamic/lib/md-collection-loader/cache\").default,\n    },\n\n    layouts,\n  }\n)\n\n// webpack hot loading\nif (module.hot) {\n  // enable hot module replacement for reducers\n  module.hot.accept([\n    // \"statinamic/lib/redux/modules\",\n    // will not be updated since it's a lib :)\n    // but will still needs to be required\n\n    // hot load your reducers\n    \"app/redux/modules\",\n  ], () => {\n    const updatedReducer = combineReducers({\n      // we still need to combine all reducers\n      ...require(\"statinamic/lib/redux/modules\"),\n      ...require(\"app/redux/modules\"),\n    })\n    store.replaceReducer(updatedReducer)\n  })\n}\n\nexport default store\n```\n## Adding custom middlewares and store enhancers to Redux store\n\n`statinamic/lib/redux/createStore` accepts two extra parameters that\nallow you to pass custom middlewares and store enhancers\n\nHere is an example of adding\n[redux-logger](https://github.com/fcomb/redux-logger) and\n[redux-search](https://github.com/treasure-data/redux-search)\nto Redux store\n\n```js\nimport { combineReducers } from \"redux\"\nimport createStore from \"statinamic/lib/redux/createStore\"\nimport * as statinamicReducers from \"statinamic/lib/redux/modules\"\nimport minifyCollection from \"statinamic/lib/md-collection-loader/minify\"\nimport { reducer as searchReducer, reduxSearch } from \"redux-search\"\nimport createLogger from \"redux-logger\"\n\nimport * as layouts from \"layouts\"\n\nconst extraMiddlewares = { createLogger() }\nconst extraStoreEnhancers = {\n  reduxSearch({\n    resourceIndexes: {\n      books: ['author', 'title']\n    },\n    resourceSelector: (resourceName, state) => {\n      return state.resources.get(resourceName)\n    }\n  })\n}\n\nconst store = createStore(\n  combineReducers({\n    ...statinamicReducers,\n    ...{\n      search: searchReducer\n    }\n  }),\n\n  // initialState\n  {\n    ...(typeof window !== \"undefined\") && window.__INITIAL_STATE__,\n\n    // static build optimization\n    ...__PROD__ && {\n      collection:\n        minifyCollection(require(\"statinamic/lib/md-collection-loader/cache\")),\n    },\n\n    layouts,\n  },\n  extraMiddlewares,\n  extraStoreEnhancers,\n\n)\n\nexport default store\n```\n","raw":"---\ntitle: Advanced usage of Redux\nincomplete: true\n---\n\n## Adding custom Redux reducers\n\nHere is an example of a store that will allow you to add\nwith your own reducers, _with support of hot loading_.\n\nIt is based on the default boilerplate and add (and combine) your custom\nreducers.\n\n```js\nimport { combineReducers } from \"redux\"\nimport createStore from \"statinamic/lib/redux/createStore\"\nimport * as statinamicReducers from \"statinamic/lib/redux/modules\"\nimport * as reducers from \"app/redux\"\n\n// for initialState\nimport * as layouts from \"layouts\"\n\nconst store = createStore(\n  // here we combine statinamic required reducers and your custom ones\n  combineReducers({\n    ...statinamicReducers,\n    ...reducers,\n  }),\n\n  // initialState\n  {\n    ...(typeof window !== \"undefined\") && window.__INITIAL_STATE__,\n\n    // static build optimization\n    ...__PROD__ && {\n      collection:\n        require(\"statinamic/lib/md-collection-loader/cache\").default,\n    },\n\n    layouts,\n  }\n)\n\n// webpack hot loading\nif (module.hot) {\n  // enable hot module replacement for reducers\n  module.hot.accept([\n    // \"statinamic/lib/redux/modules\",\n    // will not be updated since it's a lib :)\n    // but will still needs to be required\n\n    // hot load your reducers\n    \"app/redux/modules\",\n  ], () => {\n    const updatedReducer = combineReducers({\n      // we still need to combine all reducers\n      ...require(\"statinamic/lib/redux/modules\"),\n      ...require(\"app/redux/modules\"),\n    })\n    store.replaceReducer(updatedReducer)\n  })\n}\n\nexport default store\n```\n## Adding custom middlewares and store enhancers to Redux store\n\n`statinamic/lib/redux/createStore` accepts two extra parameters that\nallow you to pass custom middlewares and store enhancers\n\nHere is an example of adding\n[redux-logger](https://github.com/fcomb/redux-logger) and\n[redux-search](https://github.com/treasure-data/redux-search)\nto Redux store\n\n```js\nimport { combineReducers } from \"redux\"\nimport createStore from \"statinamic/lib/redux/createStore\"\nimport * as statinamicReducers from \"statinamic/lib/redux/modules\"\nimport minifyCollection from \"statinamic/lib/md-collection-loader/minify\"\nimport { reducer as searchReducer, reduxSearch } from \"redux-search\"\nimport createLogger from \"redux-logger\"\n\nimport * as layouts from \"layouts\"\n\nconst extraMiddlewares = { createLogger() }\nconst extraStoreEnhancers = {\n  reduxSearch({\n    resourceIndexes: {\n      books: ['author', 'title']\n    },\n    resourceSelector: (resourceName, state) => {\n      return state.resources.get(resourceName)\n    }\n  })\n}\n\nconst store = createStore(\n  combineReducers({\n    ...statinamicReducers,\n    ...{\n      search: searchReducer\n    }\n  }),\n\n  // initialState\n  {\n    ...(typeof window !== \"undefined\") && window.__INITIAL_STATE__,\n\n    // static build optimization\n    ...__PROD__ && {\n      collection:\n        minifyCollection(require(\"statinamic/lib/md-collection-loader/cache\")),\n    },\n\n    layouts,\n  },\n  extraMiddlewares,\n  extraStoreEnhancers,\n\n)\n\nexport default store\n```\n","__filename":"docs/advanced/redux.md","__url":"/statinamic/docs/advanced/redux/"}