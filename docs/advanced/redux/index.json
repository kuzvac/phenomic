{"head":{"title":"Advanced usage of Redux","incomplete":true},"body":"<h2 id=\"adding-custom-redux-reducers\"><a class=\"markdownIt-Anchor\" href=\"#adding-custom-redux-reducers\">#</a> Adding custom Redux reducers</h2>\n<p>Here is an example of a store that will allow you to add\nwith your own reducers, <em>with support of hot loading</em>.</p>\n<p>It is based on the default boilerplate and add (and combine) your custom\nreducers.</p>\n<pre><code class=\"language-js\">import { combineReducers } from \"redux\"\nimport createStore from \"statinamic/lib/redux/createStore\"\nimport * as statinamicReducers from \"statinamic/lib/redux/modules\"\nimport * as reducers from \"app/redux\"\n\n// for initialState\nimport * as pageComponents from \"app/pageComponents\"\n\nconst store = createStore(\n  // here we combine statinamic required reducers and your custom ones\n  combineReducers({\n    ...statinamicReducers,\n    ...reducers,\n  }),\n\n  // initialState\n  {\n    ...(typeof window !== \"undefined\") &amp;&amp; window.__INITIAL_STATE__,\n\n    // static build optimization\n    ...__PROD__ &amp;&amp; {\n      collection:\n        require(\"statinamic/lib/md-collection-loader/cache\").default,\n    },\n\n    // page components\n    pageComponents,\n  }\n)\n\nwebpack hot loading\nif (module.hot) {\n  // enable hot module replacement for reducers\n  module.hot.accept([\n    // \"statinamic/lib/redux/modules\",\n    // will not be updated since it's a lib :)\n    // but will still needs to be required\n\n    // hot load your reducers\n    \"app/redux/modules\",\n  ], () =&gt; {\n    const updatedReducer = combineReducers({\n      // we still need to combine all reducers\n      ...require(\"statinamic/lib/redux/modules\"),\n      ...require(\"app/redux/modules\"),\n    })\n    store.replaceReducer(updatedReducer)\n  })\n}\n\nexport default store</code></pre>\n","rawBody":"\n## Adding custom Redux reducers\n\nHere is an example of a store that will allow you to add\nwith your own reducers, _with support of hot loading_.\n\nIt is based on the default boilerplate and add (and combine) your custom\nreducers.\n\n```js\nimport { combineReducers } from \"redux\"\nimport createStore from \"statinamic/lib/redux/createStore\"\nimport * as statinamicReducers from \"statinamic/lib/redux/modules\"\nimport * as reducers from \"app/redux\"\n\n// for initialState\nimport * as pageComponents from \"app/pageComponents\"\n\nconst store = createStore(\n  // here we combine statinamic required reducers and your custom ones\n  combineReducers({\n    ...statinamicReducers,\n    ...reducers,\n  }),\n\n  // initialState\n  {\n    ...(typeof window !== \"undefined\") && window.__INITIAL_STATE__,\n\n    // static build optimization\n    ...__PROD__ && {\n      collection:\n        require(\"statinamic/lib/md-collection-loader/cache\").default,\n    },\n\n    // page components\n    pageComponents,\n  }\n)\n\nwebpack hot loading\nif (module.hot) {\n  // enable hot module replacement for reducers\n  module.hot.accept([\n    // \"statinamic/lib/redux/modules\",\n    // will not be updated since it's a lib :)\n    // but will still needs to be required\n\n    // hot load your reducers\n    \"app/redux/modules\",\n  ], () => {\n    const updatedReducer = combineReducers({\n      // we still need to combine all reducers\n      ...require(\"statinamic/lib/redux/modules\"),\n      ...require(\"app/redux/modules\"),\n    })\n    store.replaceReducer(updatedReducer)\n  })\n}\n\nexport default store\n```\n","raw":"---\ntitle: Advanced usage of Redux\nincomplete: true\n---\n\n## Adding custom Redux reducers\n\nHere is an example of a store that will allow you to add\nwith your own reducers, _with support of hot loading_.\n\nIt is based on the default boilerplate and add (and combine) your custom\nreducers.\n\n```js\nimport { combineReducers } from \"redux\"\nimport createStore from \"statinamic/lib/redux/createStore\"\nimport * as statinamicReducers from \"statinamic/lib/redux/modules\"\nimport * as reducers from \"app/redux\"\n\n// for initialState\nimport * as pageComponents from \"app/pageComponents\"\n\nconst store = createStore(\n  // here we combine statinamic required reducers and your custom ones\n  combineReducers({\n    ...statinamicReducers,\n    ...reducers,\n  }),\n\n  // initialState\n  {\n    ...(typeof window !== \"undefined\") && window.__INITIAL_STATE__,\n\n    // static build optimization\n    ...__PROD__ && {\n      collection:\n        require(\"statinamic/lib/md-collection-loader/cache\").default,\n    },\n\n    // page components\n    pageComponents,\n  }\n)\n\nwebpack hot loading\nif (module.hot) {\n  // enable hot module replacement for reducers\n  module.hot.accept([\n    // \"statinamic/lib/redux/modules\",\n    // will not be updated since it's a lib :)\n    // but will still needs to be required\n\n    // hot load your reducers\n    \"app/redux/modules\",\n  ], () => {\n    const updatedReducer = combineReducers({\n      // we still need to combine all reducers\n      ...require(\"statinamic/lib/redux/modules\"),\n      ...require(\"app/redux/modules\"),\n    })\n    store.replaceReducer(updatedReducer)\n  })\n}\n\nexport default store\n```\n","__filename":"docs/advanced/redux.md","__url":"/statinamic/docs/advanced/redux/"}